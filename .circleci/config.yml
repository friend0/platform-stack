version: 2.1
orbs:
  go: circleci/go@1.7.0
  kubernetes: circleci/kubernetes@0.12.0
  docker: circleci/docker@2.0.1

jobs:
  build:
    resource_class: large
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    environment:
      ENV: ci
      K8S_VERSION: v1.20.12
      KUBECONFIG: /home/circleci/.kube/config
      MINIKUBE_WANTUPDATENOTIFICATION: false
      MINIKUBE_WANTREPORTERRORPROMPT: false
      MINIKUBE_HOME: /home/circleci
      CHANGE_MINIKUBE_NONE_USER: true
    working_directory: /home/circleci/src/github.com/altiscope/platform-stack
    steps:
      - docker/check:
          docker-username: DOCKERHUB_LOGIN
          docker-password: DOCKERHUB_PASSWORD

      - checkout
      - run:
          name: Uninstall machine go
          command: |
            sudo rm -rf /usr/local/go
      - go/install:
          version: 1.17.3
      - run:
          name: Build executable
          command: |
            CGO_ENABLED=0 GOOS=linux  go build -o stack -v ./platform-stack/main.go
      - run:
          name: Copy executable onto path
          command: |
            sudo chmod a+x ./stack
            sudo mv ./stack /usr/local/bin
            which stack
      - run:
          name: Install stack dependencies
          command: |
            stack install

      - run:
          name: Start minikube
          command: |
            # See: https://github.com/manusa/actions-setup-minikube/issues/7
            sudo apt-get update -y && sudo apt-get install -y conntrack
            sudo -E minikube start --vm-driver=none --cpus 2 --memory 2048 --kubernetes-version=${K8S_VERSION}

      - run:
          name: Wait for minikube
          command: |
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}';
            until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
              sleep 1;
            done

      - run:
          name: Check source formatting
          command: |
            go fmt ./...

      - run:
          name: Vet source
          command: |
            go vet ./...

      - run:
          name: Test source
          command: |
            go test -v ./...

      - run:
          name: Delete kubernetes resources
          command: |
            kubectl delete all --all

      - run:
          name: Stop minikube
          command: |
            minikube stop

      - store_test_results:
          path: test-results

  install:
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    working_directory: /home/circleci/src/github.com/altiscope/platform-stack
    steps:
      - docker/check:
          docker-username: DOCKERHUB_LOGIN
          docker-password: DOCKERHUB_PASSWORD

      - checkout
      - run:
          name: Run install.sh
          command: |
            ./test-installer.sh
      - run:
          name: Which stack
          command: |
            which stack
      - run:
          name: Which stack
          command: |
            stack --version

  deploy:
    docker:
      - image: cimg/go:1.17.3
    steps:
      - add_ssh_keys:
          fingerprints:
            - "59:10:67:a9:10:2f:c5:b9:b2:82:47:4c:40:42:70:85"
      - checkout
      - run: go get -u github.com/mitchellh/gox
      - run: go get -u github.com/tcnksm/ghr
      - run: go get -u github.com/stevenmatthewt/semantics
      - run:
          name: cross compile and create release
          command: |
            tag=$(semantics --output-tag)
            if [ "$tag" ]; then
              gox -os="linux darwin" -arch="amd64" -output="dist/stack_{{.OS}}_{{.Arch}}" -ldflags="-X 'github.com/altiscope/platform-stack/platform-stack/cmd.Version=$tag'" ./platform-stack/
              ghr -t $GIT_TOKEN -u $CIRCLE_PROJECT_USERNAME -r $CIRCLE_PROJECT_REPONAME --replace $tag ./dist
            else
              echo "The commit message(s) did not indicate a major/minor/patch version."
            fi
workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      #- install
      - deploy:
          requires:
            - build
            #- install
          filters:
            branches:
              only: master
